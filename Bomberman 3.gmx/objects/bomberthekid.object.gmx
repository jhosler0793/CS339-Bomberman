<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_BomberKid_Down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>character</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>event_inherited()

// Player input
key_right = keyboard_check(vk_right);
key_d = keyboard_check(ord("D"));
key_left = -keyboard_check(vk_left);
key_a = -keyboard_check(ord("A"));
key_down = keyboard_check(vk_down);
key_s = keyboard_check(ord("S"));
key_up = -keyboard_check(vk_up);
key_w = -keyboard_check(ord("W"));
key_bomb = keyboard_check_pressed(vk_space);


// Input reactions
hmove = key_left + key_right + key_a + key_d;
vmove = key_up + key_down + key_s + key_w;
xsp = hmove * movespeed;
ysp = vmove * movespeed;
if hmove=-1 {direction=180}
if hmove=1 {direction=0}

//Horizontal Movement and Wall Collision
if (alive)
    {if place_meeting(x+xsp,y,obj_Wall)
        {
        while (!place_meeting(x+sign(xsp),y,obj_Wall)) { x += sign(xsp)}
        xsp = 0;
        }
    x += xsp;
    }
        
//Vertical Movement and Wall Collision
if (alive)
    {if place_meeting(x,y+ysp,obj_Wall)
        {
        while (!place_meeting(x,y+sign(ysp),obj_Wall)) { y += sign(ysp)}
        ysp = 0;
        }
    y += ysp;
    }

//Bomb Placing
if (alive)
{
    if global.bombsAvailable &gt; 0
    {
        if key_bomb
        {   placeBomb()
        }
    }
}
//Walk &amp; Run Animations
if (alive)
    {if (hmove = 1) or (hmove = -1) {image_xscale=(-hmove); sprite_index=spr_BomberKid_Left; image_speed=.3}
     else if (vmove = 1) {sprite_index=spr_BomberKid_Down ; image_speed=.3}
     else if (vmove = -1) {sprite_index=spr_BomberKid_Up; image_speed=.3}
     else {image_speed=0}
    }

//Self-Explosion
if !alive 
{
    if image_speed &gt; 0
        {
            if image_index &gt; image_number - 1
            {
                image_speed = 0
                global.bomberlives -= 1;
                if global.bomberlives &gt;= 0
                {
                    room_goto(global.currentstage[global.s])
                }
                else
                {
                    room_goto(GameOver)
                }
            }
        }
    }

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="enemy">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alive = false
sprite_index = spr_BomberKid_EnemyHit
image_speed = .25

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
