<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/*
    creates a matrix to be used to in the generator script
    NoObjectHome == 0
    BomberMan == 1
    Wall == 2
    IndestructibleWall == 3
    Enemy == 4
    

*/

//The maximaze height and width of the matrix
maxX = 11
maxY = 5

//The starting position for the matrix
startX = 128
startY = 320

//The current position within the matrix
curX = startX
curY = startY

//The size of the matrix
blockSize = 64

//The matrix itself
myMatrix[] = 0

//The object that will be spawned onto the map
myObject = noone

//Control variables for the amount of objects to be spawned in
if room == stage_1_progen {

    numOfChest = 17
    numOfPanelChest = 3
    numOfWalls = 20
    
    maxEnemy = 3
    numOfAngryTree = 1
    numOfFrogMan = 2
    numOfMenuBirdy = 0
    numOfGoblin = 0
    
    minDistance  = 1

}

/*
    Searches the map area in the blocksize entered for instacnes of objects already on the map.
    Then it places strings into the matrix to represent the objects.

*/

for (myY = 0; myY &lt; maxY; myY++) {
    curX = startX
    for (myX = 0; myX &lt; maxX; myX++) {
    
        myObject = instance_nearest(curX, curY, pro_Gen_Objects)
        
        if myObject.x == curX and myObject.y == curY {
        
            if myObject == instance_nearest(myObject.x, myObject.y, character) {
                myMatrix[myX, myY] = "1"
            }
            
            else if myObject == instance_nearest(myObject.x, myObject.y, obj_solidWall) {
                myMatrix[myX, myY] = "2"
            }
            else if myObject == instance_nearest(myObject.x, myObject.y, obj_Chest_withPanel) {
                myMatrix[myX, myY] = "3"
            }
            else if myObject == instance_nearest(myObject.x, myObject.y, obj_Chest) {
                myMatrix[myX, myY] = "4"
            }
            else if myObject == instance_nearest(myObject.x, myObject.y, obj_Frogman) {
                myMatrix[myX, myY] = "5"
            }
            else if myObject == instance_nearest(myObject.x, myObject.y, obj_MenuBirdy) {
                myMatrix[myX, myY] = "6"
            }
            else if myObject == instance_nearest(myObject.x, myObject.y, obj_AngryTree) {
                myMatrix[myX, myY] = "7"
            }
            else if myObject == instance_nearest(myObject.x, myObject.y, obj_Goblin) {
                myMatrix[myX, myY] = "8"
            }
            else { 
                myMatrix[myX, myY] = "0"
            }
        }
        else { 
            myMatrix[myX, myY] = "0"
            
        }
        curX = curX + blockSize
    }
    curX = startX
    curY = curY + blockSize
}

//Runs the script that will procedurally generate instances into the matrix
mapGenerator()

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>
draw_set_halign(fa_left)
curX = startX
curY = startY

for (myY = 0; myY &lt; maxY; myY++) {
    curX = startX
    for (myX = 0; myX &lt; maxX; myX++) {
        draw_text(curX, curY, myMatrix[myX, myY])
        curX = curX + blockSize
    }
    curY = curY + blockSize
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="82">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
