<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_Goblin_Down</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-3</depth>
  <persistent>0</persistent>
  <parentName>enemy</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>alive = true
movespeed = 2.5
dir = -1
xsp = 0
ysp = 0
vertMovement = true
patrolTimer = random_range(15,30)
spearTimer = random_range(120,180)
throwspear = false
spearlimit = 1


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>throwspear = false
spearTimer = random_range(120,180)
spearlimit += 1
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>dir *= -1;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Movement and Behavior
if alive
{
//Vertical Movement
    if vertMovement and patrolTimer &gt; 0 and spearTimer &gt; 0
    {
        ysp = dir * movespeed;
        if place_meeting(x,y+ysp,obj_Wall)
        {
            while (!place_meeting(x,y+sign(ysp),obj_Wall)) {y += sign(ysp)}
            
            ysp = 0;
        }
       
        if place_meeting(x,y+ysp,bomb)
        {
            while (!place_meeting(x, y+sign(ysp), bomb)) {y += sign(ysp)}
            
            ysp = 0;
        }
    
        y += ysp;
        patrolTimer -= 1
        spearTimer -= 1
    }
//Horizontal Movement
    if !vertMovement and patrolTimer &gt; 0 and spearTimer &gt; 0
    {
        xsp = dir * movespeed;
        if place_meeting(x+xsp,y,obj_Wall)
        {
            while (!place_meeting(x+sign(xsp),y,obj_Wall)) {x += sign(xsp)}
            xsp = 0;
        }
        if place_meeting(x+xsp,y,bomb)
        {
            while (!place_meeting(x+sign(xsp),y,bomb)) {x += sign(xsp)}
            xsp = 0;
        }
        x += xsp
        patrolTimer -= 1
        spearTimer -= 1
    }
// Delayed turn
if !vertMovement and xsp = 0 and !throwspear
    if !alarm[0] {alarm[0]=15}
if vertMovement and ysp = 0 and !throwspear
    if !alarm[0] {alarm[0]=15}
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Patrolling
if alive
{
    if patrolTimer &lt; 0
    {
        pick = irandom_range(0,1)
        switch(pick)
        {
            case 0:
                if !collision_rectangle(x + 32, y + 64, x - 32, y, obj_Wall, false, true) &amp;&amp;
                   !collision_rectangle(x + 32, y - 64, x - 32, y, obj_Wall, false, true)
                {
                    vertMovement = true
                    break
                }
            case 1:
                if !collision_rectangle(x + 64, y + 32, x, y - 32, obj_Wall, false, true) &amp;&amp;
                   !collision_rectangle(x - 64, y + 32, x, y - 32, obj_Wall, false, true)
                {
                    vertMovement = false
                    break
                }
        }
        patrolTimer = random_range(15,30)
    }
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Spear Throw

if alive
{
    if spearTimer &lt; 0
    {
        throwspear = true
        
        {
            if vertMovement and dir = 1 and spearlimit = 1
            {
                instance_create(x-10,y+20,obj_Spear)
                spearlimit -= 1
            }
            if vertMovement and dir = -1 and spearlimit = 1
            {
                instance_create(x+10,y-20,obj_Spear)
                spearlimit -= 1
            }
            if !vertMovement and dir = 1 and spearlimit = 1
            {
                instance_create(x+20,y,obj_Spear)
                spearlimit -= 1
            }
            if !vertMovement and dir = -1 and spearlimit = 1
            {
                instance_create(x-20,y,obj_Spear)
                spearlimit -= 1
            }
        }
        if !alarm[1] {alarm[1] = 20}
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="explosion">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if alive
{
    image_index = 0
    alive = false
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>if alive
{
//Vertical Animation
if vertMovement and !throwspear
{
    if dir = 1
    {
        draw_sprite(spr_Goblin_Down,-1,x,y)
        image_speed = .25
    }
    if dir = -1
    {
        draw_sprite(spr_Goblin_Up,-1,x,y)
        image_speed = .25
    }
}
//Horizontal Animation
if !vertMovement and !throwspear
{
    image_xscale = dir * -1
    draw_sprite_ext(spr_Goblin_Left, image_index, x, y, image_xscale, image_yscale,
                        image_angle, image_blend, image_alpha)
    image_speed = .25
}

//Spear Throw
if throwspear
{
    if vertMovement and dir = 1
    {
        draw_sprite(spr_Goblin_SpearThrow_Down,-1,x,y)
        image_speed = .2
    }
    if vertMovement and dir = -1
    {
        draw_sprite(spr_Goblin_SpearThrow_Up,-1,x,y)
        image_speed = .2
    }
    if !vertMovement
    {
        image_xscale = dir * -1
        draw_sprite_ext(spr_Goblin_SpearThrow_Left,-1,x,y,image_xscale, image_yscale, image_angle, image_blend, image_alpha)
        image_speed = .2
    }
}
}
//Death Animation
if !alive 
{
    draw_sprite(spr_Goblin_Dead,image_index,x,y)
    image_speed = .15
    
    if image_speed &gt; 0
    {
        if image_index &gt; image_number - 1
        {
            global.deadEnemy+=1
            instance_destroy()
        }   
    }    
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
